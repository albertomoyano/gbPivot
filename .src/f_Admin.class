' Gambas class file

' Variable de clase para contar los intentos fallidos
Private iIntentosFallidos As Integer = 0
Private Const MAX_INTENTOS As Integer = 3

Public Sub Form_Open()
  ' Centrar el formulario

  Me.Center
  ' Enfocar el campo de usuario
  txtUsuario.SetFocus
  ' Inicializar el contador de intentos
  iIntentosFallidos = 0

  ' Asegurar que existe una conexión a la base de datos
  If m_OnOff_y_Red.meConn = Null Or If m_OnOff_y_Red.meConn.Opened = False Then
    Try m_OnOff_y_Red.OnRed()

    If Error Then
      Message.Error("No se pudo abrir la conexión con la base de datos")
      Me.Close(False)
      Quit
    Endif
  Endif

End

Public Sub btnAceptar_Click()

  ValidarCredenciales()

End

Private Sub ValidarCredenciales()

  Dim hResultado As Result
  Dim sSQL As String
  Dim usuario As String
  Dim clave As String

  usuario = Trim(txtUsuario.Text)
  clave = Trim(txtPassword.Text)

  sSQL = "SELECT * FROM usuarios_admin WHERE usuario = '" & usuario & "' AND clave = '" & clave & "';"
  Try hResultado = m_OnOff_y_Red.meConn.Exec(sSQL, usuario, clave)

  If Error Then
    Message.Error("Error al consultar la base de datos: " & Error.Text)
    Return
  Endif

  If Not hResultado.Available Then
    ' Falló el login
    iIntentosFallidos += 1
    If iIntentosFallidos >= MAX_INTENTOS Then
      Message.Error("Número máximo de intentos alcanzado. El programa se cerrará.")
      Me.Close(False)
      Quit
    Else
      Message.Error("Usuario y/o contraseña incorrectos. Intentos restantes: " & (MAX_INTENTOS - iIntentosFallidos))
      txtUsuario.Text = ""
      txtPassword.Text = ""
      txtUsuario.SetFocus
    Endif
  Else
    f_Preferencias.txtIdAdmin.Text = hResultado!id
    f_Preferencias.txtAdministrador.Text = hResultado!usuario
    f_Preferencias.txtClaveAdministrador.Text = hResultado!clave
    f_Preferencias.txtAdministradorEmail.Text = hResultado!email
    Me.Close(True)
    f_Preferencias.ShowModal()
  Endif

End

' Opcional: Si deseas agregar un botón de cancelar
Public Sub btnCancelar_Click()

  Me.Close(False)

End

' ---------------------------------------------------------------------------
' MEJORA DE SEGURIDAD: Usar hash en lugar de contraseñas en texto plano
' ---------------------------------------------------------------------------
' Función para validar con hash (reemplazaría a ValidarCredenciales)
' Private Sub ValidarCredencialesConHash()
'   Dim sUsuario As String = txtUsuario.Text
'   Dim sPassword As String = txtPassword.Text
'   Dim hResult As Result
'   Dim sHashAlmacenado As String
'   Dim sHashIngresado As String
'
'   ' Primero, buscar el usuario para obtener su hash de contraseña
'   Try hResult = m_OnOff_y_Red.meConn.Exec("SELECT id, usuario, clave, rol FROM usuarios WHERE usuario = &1", sUsuario)
'
'   If Error Or If Not hResult.Available Then
'     ' Usuario no encontrado, pero por seguridad no informamos esto específicamente
'     iIntentosFallidos += 1
'     MostrarErrorAutenticacion()
'     Return
'   Endif
'
'   ' Obtener el hash almacenado en la BD
'   sHashAlmacenado = hResult["clave"]
'
'   ' Generar hash de la contraseña ingresada (usando sha256 o similar)
'   ' Nota: debes usar la misma sal (salt) que usaste al guardar la contraseña
'   sHashIngresado = Hash.Digest(sPassword & "tu_sal_secreta", "sha256")
'
'   ' Comparar los hashes
'   If sHashIngresado = sHashAlmacenado Then
'     ' Autenticación exitosa
'     If LCase(hResult["rol"]) = "admin" Or LCase(hResult["rol"]) = "administrador" Then
'       Me.Close(True)
'       f_Preferencias.ShowModal()
'     Else
'       Message.Warning("No tienes permisos de administrador para acceder a esta sección.")
'       ReiniciarCampos()
'     Endif
'   Else
'     ' Hash no coincide
'     iIntentosFallidos += 1
'     MostrarErrorAutenticacion()
'   Endif
' End
