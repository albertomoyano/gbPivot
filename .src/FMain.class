' Gambas class file

Private Item_Seleccionado As Integer
Private segundos As Integer
Private minutos As Integer
Private horas As Integer
Public $Bash As Process

Public Sub Form_Open()

  'nos conectamos a la base de datos
  m_OnOff_y_Red.OnRed()

  $Bash = TerminalView.Shell("/usr/bin/bash")

  SplitterPanel3.Layout = [1, 1]

  ' Inicializamos los contadores de minutos y segundos
  horas = 0
  minutos = 0
  segundos = 0
  ' Configuramos el Timer para que se ejecute cada segundo (1000 milisegundos)
  TimerParcial.Delay = 1000
  TimerParcial.Stop  ' No iniciamos el Timer hasta abrir un proyecto

  txtRecordatorios.Visible = False
  Mostrar_Lista_Tareas

End

Public Sub Menu5_Click()' salir de la aplicacion

  m_OnOff_y_Red.CerrarTodo()

End

Public Sub SplitterPanel3_Resize()

  SplitterPanel3.Layout = [1, 1]

End

Public Sub Menu2_Click()

  f_Preferencias.ShowModal()

End

Public Sub Menu7_Click()

  f_Conversor.ShowModal()

End

Public Sub TimerParcial_Timer()

  ' Incrementamos los segundos
  segundos += 1

  ' Si los segundos llegan a 60, incrementamos los minutos y reiniciamos los segundos
  If segundos = 60 Then
    segundos = 0
    minutos += 1
  Endif

  ' Si los minutos llegan a 60, incrementamos las horas y reiniciamos los minutos
  If minutos = 60 Then
    minutos = 0
    horas += 1
  Endif

  ' Actualizamos el display del tiempo
  ActualizarDisplay

End

' Función para actualizar el display del tiempo
Public Sub ActualizarDisplay()

  txtTiempo.Caption = Right$("0" & horas, 2) & ":" & Right$("0" & minutos, 2) & ":" & Right$("0" & segundos, 2)

End

' Función para actualizar el display del botón

Public Sub reinicamosTiempo()

  ' Reiniciamos el conteo de horas, minutos y segundos
  horas = 0
  minutos = 0
  segundos = 0

  ' Detenemos el Timer si está corriendo, luego lo reiniciamos
  TimerParcial.Stop
  TimerParcial.Start

  ' Actualizamos el display para reflejar el reinicio
  ActualizarDisplay

End

Public Sub Menu22_Click()

  f_BlockNotas.ShowModal()

End

Public Sub Menu8_Click()

  f_ExportarBIB.ShowModal()

End

' Evento click en DirView actualiza los archivos que se muestran en FileView1
Public Sub DirViewProyecto_Click()

  Dim bloquear As Boolean = False

  If Not bloquear Then
    FileViewProyecto.Dir = DirViewProyecto.Current
  Endif

End

' Evento que se ejecuta cuando se detecta un cambio en el directorio
Public Sub Watcher_Change()

  DirViewProyecto.Root = File.Dir(txtProyecto.Text)' reforzamos la indicación de la ruta
  DirViewProyecto.Refresh
  FileViewProyecto.Refresh

End

Public Sub ToggleButtonMostrar_Click()

  ' Cambiar visibilidad del TabPanel2 según el estado del botón
  If ToggleButtonMostrar.Value Then
    TabPanel2.Visible = True
  Else
    TabPanel2.Visible = False
  End If

End Sub

Public Sub Chequear_Realizados()
  ' Función para chequear si hay elementos completados de la lista así habilitamos / deshabilitamos el menú de borrado los elementos completados

  mnuBorrarTODOS.Enabled = False

  Dim chequear As Result

  chequear = m_OnOff_y_Red.meConn.Exec("select completado from recordatorios where completado=true")
  If chequear.Available = ""
    Return
  Else
    mnuBorrarTODOS.Enabled = True
  Endif

End

' esta función no me convence su utilidad
Public Sub mnMarcarIncompleto_Click()

  If ViewRecordatorios.Selected = False Then
    Message.Error("Debe elegir un ítem primero")
    Return
  Endif

  Dim incompleto As Result

  incompleto = m_OnOff_y_Red.meConn.Edit("recordatorios", "id=" & Item_Seleccionado)
  incompleto!completado = False
  incompleto.Update

  'Limpiamos lista y recargamos
  ViewRecordatorios.Clear
  Mostrar_Lista_Tareas

End

Public Sub mnMarcarCompletado_Click()
  'Chequeamos primero que se haya seleccionado un elemento de la lista

  If ViewRecordatorios.Selected = False Then
    Message.Error("Debe elegir un ítem primero")
    Return
  Endif

  Dim seleccionado As Result

  seleccionado = m_OnOff_y_Red.meConn.Edit("recordatorios", "id=" & Item_Seleccionado)
  seleccionado!completado = True
  seleccionado.Update

  'Limpiamos lista y recargamos
  ViewRecordatorios.Clear
  Mostrar_Lista_Tareas

End

Public Sub menuBORRARtarea_Click()

  'Chequeamos primero que se haya seleccionado un elemento de la lista
  If ViewRecordatorios.Selected = False Then
    Message.Error("Debe elegir un ítem primero")
    Return
  Endif

  Dim borrado As Result

  If Message.Question("¿Está seguro de que desea borrar este ítem?", "Si", "No") = 1 Then
    borrado = m_OnOff_y_Red.meConn.Exec("delete from recordatorios where id=" & Item_Seleccionado)
  Endif

  If ViewRecordatorios.Count = 0 Then 'Si no hay ningún contenido en la lista limpiar ocultar el panel de contenido
    txtRecordatorios.Text = ""
    txtRecordatorios.Visible = False
  Endif

  'Limpiamos lista y recargamos
  ViewRecordatorios.Clear
  Mostrar_Lista_Tareas

  txtRecordatorios.Visible = False 'Cerramos el panel lateral para que no quede abierto tras borrar ítem que pueda conetener

End

Public Sub Mostrar_Lista_Tareas() ' Función para popular la lista de eventos

  Dim listar As Result

  listar = m_OnOff_y_Red.meConn.Exec("select id, completado, titulo from recordatorios")
  If listar.Available Then
    ViewRecordatorios.Clear
    While (listar.Available)
      If listar!completado = False Then
        ViewRecordatorios.Add(CInt(listar!id), listar!titulo, Picture["./iconos/incomp.svg"])
      Else
        ViewRecordatorios.Add(CInt(listar!id), listar!titulo, Picture["./iconos/comp.svg"])
      Endif
      listar.MoveNext
    Wend

  End If

  If ViewRecordatorios.Count = 0 Then 'Si no hay ningún contenido en la lista limpiar ocultar el panel de contenido y desactivar menú borrar todos
    txtRecordatorios.Text = ""
    txtRecordatorios.Visible = False
    mnuBorrarTODOS.Enabled = False
  Else
    mnuBorrarTODOS.Enabled = True
  End If

  Chequear_Realizados()

End

Public Sub mnuBorrarTODOS_Click()

  If Message.Question("¿Está seguro de que desea borrar todos los ítems marcados como completados?") = 1 Then
    ' Conn.Exec("delete from tareas where completado=True")
    m_OnOff_y_Red.meConn.Exec("delete from recordatorios where completado=True")
    'Limpiamos lista y recargamos
    ViewRecordatorios.Clear
    Mostrar_Lista_Tareas
  Else
    Return

  Endif

  txtRecordatorios.Visible = False ' Cerramos el panel lateral por si queda abierto tras borrar ítem realizado

End

Public Sub ViewRecordatorios_Select() ' Función que nos muestra el contenido del título elegido en la ListView

  Dim vistacompleta As Result

  vistacompleta = m_OnOff_y_Red.meConn.Exec("select contenido from recordatorios where id = " & ViewRecordatorios.Item.key)
  If vistacompleta!contenido <> "" Then
    txtRecordatorios.Text = vistacompleta!contenido
    txtRecordatorios.pos = 0
    txtRecordatorios.Visible = True
  Else
    txtRecordatorios.Visible = False
  Endif

  Item_Seleccionado = ViewRecordatorios.Item.key

  Print (Item_Seleccionado)

End

Public Sub menuADD_Click()

  f_Recordatorios.ShowModal()

End

Public Sub Menu6_Click() ' abrir archivo

  Dim sRuta As String
  Dim sNombreProyecto As String
  Dim rResultado As Result
  Dim sProyectoAnterior As String

  ' Guardar referencia al proyecto anterior si existe
  If txtProyecto.Text Then
    sProyectoAnterior = File.BaseName(txtProyecto.Text)
  Endif

  Dialog.Title = "Seleccionar archivo"
  Dialog.Filter = ["*.adoc", "Archivos de AsciiDoc"]
  Dialog.AutoExt = True
  Dialog.Path = User.Home
  If Dialog.OpenFile() Then Return

  ' Obtener la ruta y el nombre del proyecto sin extensión
  sRuta = Dialog.Path
  sNombreProyecto = File.BaseName(sRuta)

  ' Verificar si el proyecto existe y está en uso
  rResultado = m_OnOff_y_Red.meConn.Exec("SELECT id, en_uso FROM nombre_proyecto WHERE nombre = &1", sNombreProyecto)

  If rResultado.Available Then
    ' Proyecto encontrado, verificar si está en uso
    If rResultado!en_uso Then
      Message.Warning("¡Atención! Este proyecto ya está siendo utilizado en otra máquina.")
      ' ' Return
    Else
      ' Proyecto encontrado pero no está en uso, marcarlo como en uso
      Try m_OnOff_y_Red.meConn.Exec("UPDATE nombre_proyecto SET en_uso = TRUE WHERE nombre = &1", sNombreProyecto)
      Message.Info("Proyecto encontrado en la base de datos. Se abrirá la aplicación.")
    Endif
  Else
    ' Proyecto no existe, insertar nuevo registro con en_uso = TRUE
    Try m_OnOff_y_Red.meConn.Exec("INSERT INTO nombre_proyecto (nombre, fecha, en_uso) VALUES (&1, &2, TRUE)",
      sNombreProyecto, Format(Date(Now), "yyyy-mm-dd"))
    Message.Info("El proyecto no existía en su base de datos. Se ha creado una nueva entrada.")
  Endif

  ' Ahora que ya hemos seleccionado y verificado el nuevo proyecto,
  ' cerramos el proyecto anterior si existía
  If sProyectoAnterior Then
    Try m_OnOff_y_Red.meConn.Exec("UPDATE nombre_proyecto SET en_uso = FALSE WHERE nombre = &1", sProyectoAnterior)
  Endif

  txtProyecto.Text = sRuta
  DirViewProyecto.Root = File.Dir(sRuta)
  TerminalView.Input("cd " & File.Dir(sRuta) & "\n") ' movemos la consola a la ruta del archivo
  reinicamosTiempo()

End

Public Sub Form_Close()
  ' Asegurar que marcamos el proyecto como no en uso al cerrar

  m_OnOff_y_Red.CerrarTodo()

End
