' Gambas class file

Private rPrompt As Result
Private Item_Seleccionado As Integer
Public segundos As Integer
Public minutos As Integer
Public horas As Integer
Public $Bash As Process = TerminalView.Shell("/usr/bin/bash")
Public horasTotal As Integer
Public minutosTotal As Integer
Public segundosTotal As Integer

Public Sub Form_Open()

  Dim RutaArchivoActual As String

  FMain.Title = "gbPivot (usuario: " ")"
  'nos conectamos a la base de datos
  m_OnOff_y_Red.OnRed()

  ' Usar la ruta existente para el editor ACE
  Dim ruta As String
  Dim rutaAce As String = User.Home & "/.gbpivot/www/editor.html"

  ruta = "file://" & rutaAce
  WebViewEditor.url = ruta

  ' Inicializar variables necesarias
  RutaArchivoActual = ""

  ' $Bash = TerminalView.Shell("/usr/bin/bash")

  ' Inicializamos los contadores de minutos y segundos
  horas = 0
  minutos = 0
  segundos = 0
  ' Configuramos el Timer para que se ejecute cada segundo (1000 milisegundos)
  TimerParcial.Delay = 1000
  TimerParcial.Stop' No iniciamos el Timer hasta abrir un proyecto

  txtRecordatorios.Visible = False
  Mostrar_Lista_Tareas
  gridviewAI()  ' Configura la estructura del grid
  cargargrid()  ' Carga los datos
  btnPromptNuevo.Visible = True
  btnPromptBorrar.Visible = False
  btnPromptGuardar.Visible = False
  btnPromptGuardarMod.Visible = False

End

Public Sub Menu2_Click()

  f_Admin.ShowModal()

End

Public Sub Menu7_Click()

  f_Conversor.ShowModal()

End

Public Sub TimerParcial_Timer()

  ' Incrementamos los segundos
  segundos += 1

  ' Si los segundos llegan a 60, incrementamos los minutos y reiniciamos los segundos
  If segundos = 60 Then
    segundos = 0
    minutos += 1
  Endif

  ' Si los minutos llegan a 60, incrementamos las horas y reiniciamos los minutos
  If minutos = 60 Then
    minutos = 0
    horas += 1
  Endif

  ' Actualizamos el display del tiempo
  ActualizarDisplay()

End

Public Sub Menu22_Click()

  f_BlockNotas.ShowModal()

End

Public Sub Menu8_Click()

  f_ExportarBIB.ShowModal()

End

' Evento click en DirView actualiza los archivos que se muestran en FileView1
Public Sub DirViewProyecto_Click()

  Dim bloquear As Boolean = False

  If Not bloquear Then
    FileViewProyecto.Dir = DirViewProyecto.Current
  Endif

End

' Evento que se ejecuta cuando se detecta un cambio en el directorio
Public Sub Watcher_Change()

  DirViewProyecto.Root = File.Dir(txtProyecto.Text)' reforzamos la indicación de la ruta
  DirViewProyecto.Refresh
  FileViewProyecto.Refresh

End

Public Sub ToggleButtonMostrar_Click()

  ' Cambiar visibilidad del TabPanel2 según el estado del botón
  If ToggleButtonMostrar.Value Then
    TabPanel2.Visible = True
  Else
    TabPanel2.Visible = False
  End If

End Sub

Public Sub Chequear_Realizados()
  ' Función para chequear si hay elementos completados de la lista así habilitamos / deshabilitamos el menú de borrado los elementos completados

  mnuBorrarTODOS.Enabled = False

  Dim chequear As Result

  chequear = m_OnOff_y_Red.meConn.Exec("select completado from recordatorios where completado=true")
  If chequear.Available = ""
    Return
  Else
    mnuBorrarTODOS.Enabled = True
  Endif

End

' esta función no me convence su utilidad
Public Sub mnMarcarIncompleto_Click()

  If ViewRecordatorios.Selected = False Then
    Message.Error("Debe elegir un ítem primero")
    Return
  Endif

  Dim incompleto As Result

  incompleto = m_OnOff_y_Red.meConn.Edit("recordatorios", "id=" & Item_Seleccionado)
  incompleto!completado = False
  incompleto.Update

  'Limpiamos lista y recargamos
  ViewRecordatorios.Clear
  Mostrar_Lista_Tareas

End

Public Sub mnMarcarCompletado_Click()
  'Chequeamos primero que se haya seleccionado un elemento de la lista

  If ViewRecordatorios.Selected = False Then
    Message.Error("Debe elegir un ítem primero")
    Return
  Endif

  Dim seleccionado As Result

  seleccionado = m_OnOff_y_Red.meConn.Edit("recordatorios", "id=" & Item_Seleccionado)
  seleccionado!completado = True
  seleccionado.Update

  'Limpiamos lista y recargamos
  ViewRecordatorios.Clear
  Mostrar_Lista_Tareas

End

Public Sub menuBORRARtarea_Click()

  'Chequeamos primero que se haya seleccionado un elemento de la lista
  If ViewRecordatorios.Selected = False Then
    Message.Error("Debe elegir un ítem primero")
    Return
  Endif

  Dim borrado As Result

  If Message.Question("¿Está seguro de que desea borrar este ítem?", "Si", "No") = 1 Then
    borrado = m_OnOff_y_Red.meConn.Exec("delete from recordatorios where id=" & Item_Seleccionado)
  Endif

  If ViewRecordatorios.Count = 0 Then 'Si no hay ningún contenido en la lista limpiar ocultar el panel de contenido
    txtRecordatorios.Text = ""
    txtRecordatorios.Visible = False
  Endif

  'Limpiamos lista y recargamos
  ViewRecordatorios.Clear
  Mostrar_Lista_Tareas

  txtRecordatorios.Visible = False 'Cerramos el panel lateral para que no quede abierto tras borrar ítem que pueda conetener

End

Public Sub Mostrar_Lista_Tareas() ' Función para popular la lista de eventos

  Dim listar As Result

  listar = m_OnOff_y_Red.meConn.Exec("select id, completado, titulo from recordatorios")
  If listar.Available Then
    ViewRecordatorios.Clear
    While (listar.Available)
      If listar!completado = False Then
        ViewRecordatorios.Add(CInt(listar!id), listar!titulo, Picture["./iconos/incomp.svg"])
      Else
        ViewRecordatorios.Add(CInt(listar!id), listar!titulo, Picture["./iconos/comp.svg"])
      Endif
      listar.MoveNext
    Wend

  End If

  If ViewRecordatorios.Count = 0 Then 'Si no hay ningún contenido en la lista limpiar ocultar el panel de contenido y desactivar menú borrar todos
    txtRecordatorios.Text = ""
    txtRecordatorios.Visible = False
    mnuBorrarTODOS.Enabled = False
  Else
    mnuBorrarTODOS.Enabled = True
  End If

  Chequear_Realizados()

End

Public Sub mnuBorrarTODOS_Click()

  If Message.Question("¿Está seguro de que desea borrar todos los ítems marcados como completados?") = 1 Then
    ' Conn.Exec("delete from tareas where completado=True")
    m_OnOff_y_Red.meConn.Exec("delete from recordatorios where completado=True")
    'Limpiamos lista y recargamos
    ViewRecordatorios.Clear
    Mostrar_Lista_Tareas
  Else
    Return

  Endif

  txtRecordatorios.Visible = False ' Cerramos el panel lateral por si queda abierto tras borrar ítem realizado

End

Public Sub ViewRecordatorios_Select() ' Función que nos muestra el contenido del título elegido en la ListView

  Dim vistacompleta As Result

  vistacompleta = m_OnOff_y_Red.meConn.Exec("select contenido from recordatorios where id = " & ViewRecordatorios.Item.key)
  If vistacompleta!contenido <> "" Then
    txtRecordatorios.Text = vistacompleta!contenido
    txtRecordatorios.pos = 0
    txtRecordatorios.Visible = True
  Else
    txtRecordatorios.Visible = False
  Endif

  Item_Seleccionado = ViewRecordatorios.Item.key

  Print (Item_Seleccionado)

End

Public Sub menuADD_Click()

  f_Recordatorios.ShowModal()

End

Public Sub Menu6_Click() ' abrir archivo

  Dim sRuta As String
  Dim sNombreProyecto As String
  Dim rResultado As Result
  Dim sProyectoAnterior As String
  Dim bProyectoAbierto As Boolean = False ' Flag para controlar si se abrió el proyecto

  ' Guardar referencia al proyecto anterior si existe
  If txtProyecto.Text Then
    sProyectoAnterior = File.BaseName(txtProyecto.Text)
  Endif

  Dialog.Title = "Seleccionar archivo"
  Dialog.Filter = ["*.adoc", "Archivos de AsciiDoc"]
  Dialog.AutoExt = True
  Dialog.Path = User.Home
  If Dialog.OpenFile() Then Return

  ' Obtener la ruta y el nombre del proyecto sin extensión
  sRuta = Dialog.Path
  sNombreProyecto = File.BaseName(sRuta)

  ' Verificar si el proyecto existe y está en uso
  rResultado = m_OnOff_y_Red.meConn.Exec("SELECT id, en_uso FROM nombre_proyecto WHERE nombre = &1", sNombreProyecto)

  If rResultado.Available Then
    ' Proyecto encontrado, verificar si está en uso
    If rResultado!en_uso Then
      Message.Warning("¡Atención! Este proyecto ya está siendo utilizado en otra máquina.")
      ' No hacemos nada más aquí, el flag sigue siendo FALSE
    Else
      ' Proyecto encontrado pero no está en uso, marcarlo como en uso
      Try m_OnOff_y_Red.meConn.Exec("UPDATE nombre_proyecto SET en_uso = TRUE WHERE nombre = &1", sNombreProyecto)
      Message.Info("Proyecto encontrado en la base de datos. Se abrirá la aplicación.")
      bProyectoAbierto = True ' Marcamos que se puede abrir
    Endif
  Else
    ' Proyecto no existe, insertar nuevo registro con en_uso = TRUE
    Try m_OnOff_y_Red.meConn.Exec("INSERT INTO nombre_proyecto (nombre, fecha, en_uso) VALUES (&1, &2, TRUE)",
      sNombreProyecto, Format(Date(Now), "yyyy-mm-dd"))
    Message.Info("El proyecto no existía en su base de datos. Se ha creado una nueva entrada.")
    bProyectoAbierto = True ' Marcamos que se puede abrir
  Endif

  ' Solo procedemos si el proyecto se pudo abrir
  If bProyectoAbierto Then
    ' Ahora que ya hemos seleccionado y verificado el nuevo proyecto,
    ' cerramos el proyecto anterior si existía
    If sProyectoAnterior Then
      Try m_OnOff_y_Red.meConn.Exec("UPDATE nombre_proyecto SET en_uso = FALSE WHERE nombre = &1", sProyectoAnterior)
    Endif

    ' Solo actualizamos la interfaz SI el proyecto no estaba en uso
    txtProyecto.Text = sRuta
    DirViewProyecto.Root = File.Dir(sRuta)
    TerminalView.Input("cd " & File.Dir(sRuta) & "\n") ' movemos la consola a la ruta del archivo
    ' Solo procedemos si el proyecto se pudo abrir
    If bProyectoAbierto Then
      ' [código existente sin modificar]
      reinicamosTiempo()
      ' Cargar el tiempo total acumulado desde la base de datos
      cargarTiempoTotal(sNombreProyecto)
    Endif
  Endif

End

' Añadir este método para cargar el tiempo total
Public Sub cargarTiempoTotal(sNombreProyecto As String)

  Dim rResultado As Result
  Dim tiempoTotalSegundos As Integer = 0

  ' Verificar primero si la columna existe en la tabla
  Try rResultado = m_OnOff_y_Red.meConn.Exec("PRAGMA table_info(nombre_proyecto)")

  Dim columnaExiste As Boolean = False
  While rResultado.Available
    If rResultado["name"] = "tiempo_total_segundos" Then
      columnaExiste = True
      Break
    Endif
    rResultado.MoveNext
  Wend

  ' Si la columna no existe, la creamos
  If Not columnaExiste Then
    Try m_OnOff_y_Red.meConn.Exec("ALTER TABLE nombre_proyecto ADD COLUMN tiempo_total_segundos INTEGER DEFAULT 0")
    ' Inicializamos a cero ya que la columna es nueva
    horasTotal = 0
    minutosTotal = 0
    segundosTotal = 0
    ActualizarDisplayTotal()
    Return
  Endif

  ' Ahora consultamos el tiempo total para este proyecto
  Try rResultado = m_OnOff_y_Red.meConn.Exec("SELECT tiempo_total_segundos FROM nombre_proyecto WHERE nombre = &1", sNombreProyecto)

  ' Si la consulta fue exitosa y hay datos
  If rResultado And rResultado.Available Then
    ' Manejamos el caso de valor nulo de manera más segura
    Try tiempoTotalSegundos = rResultado!tiempo_total_segundos

    If Error Then
      ' Si hay error al obtener el valor, inicializamos a cero
      tiempoTotalSegundos = 0
    Endif

    horasTotal = Int(tiempoTotalSegundos / 3600)
    minutosTotal = Int((tiempoTotalSegundos Mod 3600) / 60)
    segundosTotal = tiempoTotalSegundos Mod 60
  Else
    ' Si no hay tiempo registrado, inicializamos a cero
    horasTotal = 0
    minutosTotal = 0
    segundosTotal = 0
  Endif

  ' Actualizar el display del tiempo total
  ActualizarDisplayTotal()

End

' Añadir este método para guardar el tiempo total
Public Sub guardarTiempoTotal()

  Dim tiempoTotalSegundos As Integer
  Dim tiempoParcialSegundos As Integer
  Dim sNombreProyecto As String

  ' Solo proceder si hay un proyecto abierto
  If txtProyecto.Text Then
    sNombreProyecto = File.BaseName(txtProyecto.Text)

    ' Calcular tiempo parcial en segundos
    tiempoParcialSegundos = (horas * 3600) + (minutos * 60) + segundos

    ' Calcular tiempo total en segundos
    tiempoTotalSegundos = (horasTotal * 3600) + (minutosTotal * 60) + segundosTotal + tiempoParcialSegundos

    ' Actualizar la base de datos
    Try m_OnOff_y_Red.meConn.Exec("UPDATE nombre_proyecto SET tiempo_total_segundos = &1, en_uso = FALSE WHERE nombre = &2",
      tiempoTotalSegundos, sNombreProyecto)
  Endif

End

' Modificar el método reinicamosTiempo para reiniciar solo el tiempo parcial
Public Sub reinicamosTiempo()
  ' Reiniciamos solo el tiempo parcial, no el total

  horas = 0
  minutos = 0
  segundos = 0
  ActualizarDisplay()
  TimerParcial.Start  ' Iniciamos el timer

End

' Añadir este método para actualizar el display del tiempo total
Public Sub ActualizarDisplayTotal()
  ' Formatear el tiempo total (hh:mm:ss)

  txtTiempoTotal.Text = Format(horasTotal, "00") & ":" & Format(minutosTotal, "00") & ":" & Format(segundosTotal, "00")

End

' Modificar ActualizarDisplay para incluir el tiempo parcial + total
Public Sub ActualizarDisplay()
  ' Formatear el tiempo parcial (hh:mm:ss)

  txtTiempo.Text = Format(horas, "00") & ":" & Format(minutos, "00") & ":" & Format(segundos, "00")

  ' Calcular y mostrar el tiempo total (suma del tiempo parcial actual + tiempo total anterior)
  Dim totalHoras As Integer = horasTotal
  Dim totalMinutos As Integer = minutosTotal
  Dim totalSegundos As Integer = segundosTotal + segundos

  ' Ajustar los segundos
  If totalSegundos >= 60 Then
    totalMinutos += Int(totalSegundos / 60)
    totalSegundos = totalSegundos Mod 60
  Endif

  ' Ajustar los minutos
  totalMinutos += minutos
  If totalMinutos >= 60 Then
    totalHoras += Int(totalMinutos / 60)
    totalMinutos = totalMinutos Mod 60
  Endif

  ' Ajustar las horas
  totalHoras += horas

  ' Mostrar tiempo total (tiempo acumulado + tiempo actual)
  txtTiempoTotal.Text = Format(totalHoras, "00") & ":" & Format(totalMinutos, "00") & ":" & Format(totalSegundos, "00")

End

Public Sub Form_Close()

  m_OnOff_y_Red.CerrarTodo()

End

Public Sub Menu5_Click()' salir de la aplicacion

  m_OnOff_y_Red.CerrarTodo()

End

Public Sub btnPromptNuevo_Click()

  PromptNuevo()

End

Public Sub btnPromptGuardar_Click()

  GuardarPrompt()

End

Public Sub gridviewAI()

  gridAI.Header = True
  gridAI.Grid = True
  gridAI.Columns.Count = 3
  gridAI.Columns[0].Title = "id"
  gridAI.Columns[0].Width = 0
  gridAI.Columns[1].Title = "Identificador"
  gridAI.Columns[1].Width = 300
  gridAI.Columns[2].Title = "Prompt"
  gridAI.Columns[2].Width = 300

End

' Función para cargar y actualizar la grilla
Public Sub cargargrid()
  ' Guardamos el resultado en la variable de módulo

  rPrompt = m_OnOff_y_Red.meConn.Exec("SELECT * FROM asistente_ai ORDER BY id")
  gridAI.Rows.Count = rPrompt.Count
  gridAI.Refresh()

End

Public Sub gridAI_Data(Row As Integer, Column As Integer)
  ' Verificamos que tengamos resultados

  If rPrompt And If rPrompt.Available Then
    If Row >= 0 And Row < rPrompt.Count Then
      ' Movemos el cursor al registro correspondiente
      rPrompt.MoveTo(Row)
      ' Asignamos el valor de la columna correspondiente
      Try gridAI.Data.Text = Str(rPrompt[Column])
    Endif
  Endif

  ' Alternamos colores en las filas
  If row Mod 2 = 0 Then
    gridAI.Data.Background = Color.RGB(230, 230, 230)
  Endif

End

Public Sub PromptNuevo()
  ' Habilitamos los campos de entrada

  LimpiarCampos()
  ' Ocultamos/mostramos botones según sea necesario
  btnPromptNuevo.Visible = False
  btnPromptBorrar.Visible = False
  btnPromptGuardar.Visible = True
  btnPromptGuardarMod.Visible = False
  ' Obtenemos el último ID y sumamos +1 para el nuevo registro
  Dim resultado As Result
  resultado = m_OnOff_y_Red.meConn.Exec("SELECT MAX(id) FROM asistente_ai LIMIT 1")
  Dim Idn As Integer
  ' Si no hay ninguna entrada entonces arrancamos desde 0
  If resultado["MAX(id)"] = Null Then
    Idn = 0
  Else
    Idn = CInt(resultado["MAX(id)"]) + 1
  Endif
  txtIdPrompt.Text = Idn
  txtIdentificador.ReadOnly = False
  txtIdentificador.Background = Color.White
  txtIdentificador.SetFocus

End

Public Sub GuardarPrompt()

  Dim miCreate As Result

  Try miCreate = m_OnOff_y_Red.meConn.Create("asistente_ai")
  If Error Then
    Message.Error("Error al crear: " & Error.Text)
    Return
  Endif
  With miCreate
    !id = txtIdPrompt.Text
    !identificador = txtIdentificador.Text
    !prompt = txtAreaPrompt1.Text
    Try .Update()
    If Error Then
      Message.Error("Error al guardar: " & Error.Text)
      Return
    Endif
  End With
  Message.Info("Nueva entrada guardada.")
  cargargrid()  ' Actualizamos la grilla después de guardar
  LimpiarCampos()
  txtIdentificador.ReadOnly = True
  txtIdentificador.Background = Color.Background
  btnPromptNuevo.Visible = True
  btnPromptBorrar.Visible = False
  btnPromptGuardar.Visible = False
  btnPromptGuardarMod.Visible = False

End

Public Sub gridAI_Click()

  txtIdentificador.Enabled = True
  txtAreaPrompt1.Enabled = True
  btnPromptNuevo.Visible = False
  btnPromptBorrar.Visible = True
  btnPromptGuardar.Visible = False
  btnPromptGuardarMod.Visible = True
  txtIdentificador.Background = Color.White
  txtIdentificador.ReadOnly = False
  ' Rellenar los campos de texto con los valores de la fila seleccionada
  txtIdPrompt.Text = gridAI[gridAI.row, 0].Text
  txtIdentificador.Text = gridAI[gridAI.row, 1].Text
  txtAreaPrompt1.Text = gridAI[gridAI.row, 2].Text

End

Public Sub LimpiarCampos()

  txtIdPrompt.Text = ""
  txtIdentificador.Text = ""
  txtAreaPrompt1.Text = ""

End

Public Sub Form_Activate()

  cargargrid()

End

Public Sub btnPromptBorrar_Click()

  Dim id As Integer = Val(txtIdPrompt.Text)

  If Message.Question("¿Está seguro que desea eliminar este registro?", "Sí", "No") = 1 Then
    Try m_OnOff_y_Red.meConn.Exec("DELETE FROM asistente_ai WHERE id = &1", id)
    If Error Then
      Message.Error("Error al eliminar: " & Error.Text)
      Return
    Endif

    Message.Info("Registro eliminado correctamente.")
    cargargrid()  ' Actualizamos la grilla después de eliminar
    LimpiarCampos()
    btnPromptNuevo.Visible = True
    btnPromptBorrar.Visible = False
    btnPromptGuardar.Visible = False
    btnPromptGuardarMod.Visible = False
  Endif

End

Public Sub btnPromptGuardarMod_Click()

  Dim miModify As Result
  Dim id As Integer = Val(txtIdPrompt.Text)

  ' Buscamos el registro a modificar
  Try miModify = m_OnOff_y_Red.meConn.Edit("asistente_ai", "id = &1", id)
  If Error Then
    Message.Error("Error al buscar registro: " & Error.Text)
    Return
  Endif

  With miModify
    !identificador = txtIdentificador.Text
    !prompt = txtAreaPrompt1.Text
    Try .Update()
    If Error Then
      Message.Error("Error al actualizar: " & Error.Text)
      Return
    Endif
  End With

  Message.Info("Registro actualizado correctamente.")
  cargargrid()  ' Actualizamos la grilla después de modificar
  LimpiarCampos()
  btnPromptNuevo.Visible = True
  btnPromptBorrar.Visible = False
  btnPromptGuardar.Visible = False
  btnPromptGuardarMod.Visible = False
  txtIdentificador.ReadOnly = True
  txtIdentificador.Background = Color.Background

End

Public Sub btnVerProyectos_Click()

  ' Cambiar visibilidad del TabPanel2 según el estado del botón
  If btnVerProyectos.Value Then
    VBoxProyectos.Visible = True
  Else
    VBoxProyectos.Visible = False
  End If

End
