' Gambas class file

' Private rPrompt As Result
Public hResultadoGlosario As Result
Private Item_Seleccionado As Integer = -1
Public segundos As Integer
Public minutos As Integer
Public horas As Integer
Public $Bash As Process
Public horasTotal As Integer
Public minutosTotal As Integer
Public segundosTotal As Integer
Public NombreArchivo As String
Public RutaProyecto As String

Public Sub Form_Open()

  Dim versionRemota As String
  Dim versionLocal As String = Application.Version

  ' Comprobación de versión
  versionRemota = m_Inicio.GitVersion("https://raw.githubusercontent.com/albertomoyano/gbpivot/refs/heads/main/.project")
  If versionRemota <> "" And versionRemota <> versionLocal Then
    Message.Info("Tu versión instalada difiere de la versión disponible en el repositorio: " & versionRemota)
  Endif

  ' Verificación de ejecuciones múltiples
  Dim name As String
  Exec ["pgrep", "-fl", Application.Name] Wait To name
  If Split(Trim$(name), gb.NewLine, "", True).Count > 1 Then
    Message.Warning(Application.Name & " ya se está ejecutando en este equipo.")
    Quit
  Endif

  ' Dim RutaArchivoActual As String

  FMain.Title = "gbPivot (usuario en curso: " & m_OnOff_y_Red.UsuarioActual & ") versión en desarrollo"

  ' Damos inicio al control de archivos
  m_Inicio.ControlDeInicio()' controlamos directorios y archivos base del programa
  m_Inicio.CopiandoArchivosAce()
  m_Inicio.CopiarArchivosBash()
  m_glosarios.ConfigurarGridGlosario(ViewGridGlosarioTotal)
  m_TEI.ConfigurarGridTEI(ViewGridTEI)
  m_Inicio.LevantarThemes()
  m_Inicio.LevantarScriptBash()
  m_Inteligencia.ConfigurarGridInteligencia(ViewgridAI)

  ' Usar la ruta existente para el editor ACE
  Dim ruta As String
  Dim rutaAce As String = User.Home & "/.gbpivot/www/editor.html"

  ruta = "file://" & rutaAce
  WebViewEditor.url = ruta

  $Bash = tvProyecto.Shell("/usr/bin/bash")

  ' Inicializamos los contadores de minutos y segundos
  horas = 0
  minutos = 0
  segundos = 0
  ' Configuramos el Timer para que se ejecute cada segundo (1000 milisegundos)
  TimerParcial.Delay = 1000
  TimerParcial.Stop' No iniciamos el Timer hasta abrir un proyecto

  txtRecordatorios.Visible = False
  ' Mostrar_Lista_Tareas
  btnPromptNuevo.Visible = True
  btnPromptBorrar.Visible = False
  btnPromptGuardar.Visible = False
  btnPromptGuardarCambios.Visible = False

  ' glosario
  m_glosarios.ConsultaBBDDglo()
  btnNuevoGlosario.Visible = True
  btnBorrarGlosario.Visible = False
  btnGuardarGlosario.Visible = False
  btnGuardarCambiosGlosario.Visible = False

  ' inteligencia
  m_Inteligencia.ConsultaBBDDinteligencia()
  btnPromptNuevo.Visible = True
  btnPromptBorrar.Visible = False
  btnPromptGuardar.Visible = False
  btnPromptGuardarCambios.Visible = False

End

Public Sub Menu2_Click()

  f_Admin.ShowModal()

End

Public Sub Menu7_Click()

  f_Conversor.ShowModal()

End

Public Sub TimerParcial_Timer()

  ' Incrementamos los segundos
  segundos += 1

  ' Si los segundos llegan a 60, incrementamos los minutos y reiniciamos los segundos
  If segundos = 60 Then
    segundos = 0
    minutos += 1
  Endif

  ' Si los minutos llegan a 60, incrementamos las horas y reiniciamos los minutos
  If minutos = 60 Then
    minutos = 0
    horas += 1
  Endif

  ' Actualizamos el display del tiempo
  ActualizarDisplay()

End

Public Sub Menu8_Click()

  f_ExportarBIB.ShowModal()

End

' Evento que se ejecuta cuando se detecta un cambio en el directorio
Public Sub Watcher_Change()

  DirViewProyecto.Root = File.Dir(txtProyecto.Text)' reforzamos la indicación de la ruta
  DirViewProyecto.Refresh
  FileViewProyecto.Refresh

End

Public Sub ToggleButtonMostrar_Click()

  MostrarConsola()

End Sub

Public Sub MostrarConsola()

  ' Cambiar visibilidad del TabPanel2 según el estado del botón
  If ToggleButtonMostrar.Value Then
    TabPanel2.Visible = True
  Else
    TabPanel2.Visible = False
  End If

End

Public Sub Chequear_Realizados()
  ' Función para chequear si hay elementos completados de la lista así habilitamos / deshabilitamos el menú de borrado los elementos completados

  mnuBorrarTODOS.Enabled = False

  Dim chequear As Result

  chequear = m_OnOff_y_Red.meConn.Exec("select completado from recordatorios where completado=true")
  If chequear.Available = ""
    Return
  Else
    mnuBorrarTODOS.Enabled = True
  Endif

End

' esta función no me convence su utilidad
Public Sub mnMarcarIncompleto_Click()

  If ViewRecordatorios.Selected = False Then
    Message.Error("Debe elegir un ítem primero")
    Return
  Endif

  Dim incompleto As Result

  incompleto = m_OnOff_y_Red.meConn.Edit("recordatorios", "id=" & Item_Seleccionado)
  incompleto!completado = False
  incompleto.Update

  'Limpiamos lista y recargamos
  ViewRecordatorios.Clear
  ' Mostrar_Lista_Tareas

End

Public Sub mnMarcarCompletado_Click()
  'Chequeamos primero que se haya seleccionado un elemento de la lista

  If ViewRecordatorios.Selected = False Then
    Message.Error("Debe elegir un ítem primero")
    Return
  Endif

  Dim seleccionado As Result

  seleccionado = m_OnOff_y_Red.meConn.Edit("recordatorios", "id=" & Item_Seleccionado)
  seleccionado!completado = True
  seleccionado.Update

  'Limpiamos lista y recargamos
  ViewRecordatorios.Clear
  ' Mostrar_Lista_Tareas

End

Public Sub menuBORRARtarea_Click()

  'Chequeamos primero que se haya seleccionado un elemento de la lista
  If ViewRecordatorios.Selected = False Then
    Message.Error("Debe elegir un ítem primero")
    Return
  Endif

  Dim borrado As Result

  If Message.Question("¿Está seguro de que desea borrar este ítem?", "Si", "No") = 1 Then
    borrado = m_OnOff_y_Red.meConn.Exec("delete from recordatorios where id=" & Item_Seleccionado)
  Endif

  If ViewRecordatorios.Count = 0 Then 'Si no hay ningún contenido en la lista limpiar ocultar el panel de contenido
    txtRecordatorios.Text = ""
    txtRecordatorios.Visible = False
  Endif

  'Limpiamos lista y recargamos
  ViewRecordatorios.Clear
  ' Mostrar_Lista_Tareas

  txtRecordatorios.Visible = False 'Cerramos el panel lateral para que no quede abierto tras borrar ítem que pueda conetener

End

' Public Sub Mostrar_Lista_Tareas() ' Función para popular la lista de eventos
'
'   Dim listar As Result
'
'   listar = m_OnOff_y_Red.meConn.Exec("select id, completado, titulo from recordatorios")
'   If listar.Available Then
'     ViewRecordatorios.Clear
'     While (listar.Available)
'       If listar!completado = False Then
'         ViewRecordatorios.Add(CInt(listar!id), listar!titulo, Picture["./iconos/incomp.svg"])
'       Else
'         ViewRecordatorios.Add(CInt(listar!id), listar!titulo, Picture["./iconos/comp.svg"])
'       Endif
'       listar.MoveNext
'     Wend
'
'   End If
'
'   If ViewRecordatorios.Count = 0 Then 'Si no hay ningún contenido en la lista limpiar ocultar el panel de contenido y desactivar menú borrar todos
'     txtRecordatorios.Text = ""
'     txtRecordatorios.Visible = False
'     mnuBorrarTODOS.Enabled = False
'   Else
'     mnuBorrarTODOS.Enabled = True
'   End If
'
'   Chequear_Realizados()
'
' End

' Public Sub mnuBorrarTODOS_Click()
'
'   If Message.Question("¿Está seguro de que desea borrar todos los ítems marcados como completados?") = 1 Then
'     ' Conn.Exec("delete from tareas where completado=True")
'     m_OnOff_y_Red.meConn.Exec("delete from recordatorios where completado=True")
'     'Limpiamos lista y recargamos
'     ViewRecordatorios.Clear
'     Mostrar_Lista_Tareas
'   Else
'     Return
'
'   Endif
'
'   txtRecordatorios.Visible = False ' Cerramos el panel lateral por si queda abierto tras borrar ítem realizado
'
' End

' Public Sub ViewRecordatorios_Select() ' Función que nos muestra el contenido del título elegido en la ListView
'
'   Dim vistacompleta As Result
'
'   vistacompleta = m_OnOff_y_Red.meConn.Exec("select contenido from recordatorios where id = " & ViewRecordatorios.Item.key)
'   If vistacompleta!contenido <> "" Then
'     txtRecordatorios.Text = vistacompleta!contenido
'     txtRecordatorios.pos = 0
'     txtRecordatorios.Visible = True
'   Else
'     txtRecordatorios.Visible = False
'   Endif
'
'   Item_Seleccionado = ViewRecordatorios.Item.key
'
'   Print (Item_Seleccionado)
'
' End

' Public Sub menuADD_Click()
'
'   f_Recordatorios.ShowModal()
'
' End

' Añadir este método para cargar el tiempo total
Public Sub cargarTiempoTotal(NombreProyecto As String)

  Dim rResultado As Result
  Dim tiempoTotalSegundos As Integer = 0

  ' Dim columnaExiste As Boolean = False
  '
  ' While rResultado.Available
  '   If rResultado["nombre"] = "tiempo_total" Then
  '     columnaExiste = True
  '     Break
  '   Endif
  '   rResultado.MoveNext
  ' Wend

  ' Ahora consultamos el tiempo total para este proyecto
  Try rResultado = m_OnOff_y_Red.meConn.Exec("SELECT tiempo_total FROM proyectos WHERE nombre = &2", NombreProyecto)

  ' Si la consulta fue exitosa y hay datos
  If rResultado And rResultado.Available Then
    ' Manejamos el caso de valor nulo de manera más segura
    Try tiempoTotalSegundos = rResultado!tiempo_total

    If Error Then
      ' Si hay error al obtener el valor, inicializamos a cero
      tiempoTotalSegundos = 0
    Endif

    horasTotal = Int(tiempoTotalSegundos / 3600)
    minutosTotal = Int((tiempoTotalSegundos Mod 3600) / 60)
    segundosTotal = tiempoTotalSegundos Mod 60
  Else
    ' Si no hay tiempo registrado, inicializamos a cero
    horasTotal = 0
    minutosTotal = 0
    segundosTotal = 0
  Endif

  ' Actualizar el display del tiempo total
  ActualizarDisplayTotal()

End

' Añadir este método para guardar el tiempo total
Public Sub guardarTiempoTotal()

  Dim tiempoTotalSegundos As Integer
  Dim tiempoParcialSegundos As Integer
  Dim sNombreProyecto As String

  ' Solo proceder si hay un proyecto abierto
  If txtProyecto.Text Then
    sNombreProyecto = File.BaseName(txtProyecto.Text)

    ' Calcular tiempo parcial en segundos
    tiempoParcialSegundos = (horas * 3600) + (minutos * 60) + segundos

    ' Calcular tiempo total en segundos
    tiempoTotalSegundos = (horasTotal * 3600) + (minutosTotal * 60) + segundosTotal + tiempoParcialSegundos

    ' Actualizar la base de datos
    Try m_OnOff_y_Red.meConn.Exec("UPDATE nombre_proyecto SET tiempo_total = &1, en_uso = FALSE WHERE nombre = &2",
      tiempoTotalSegundos, sNombreProyecto)
  Endif

End

' Modificar el método reinicamosTiempo para reiniciar solo el tiempo parcial
Public Sub reinicamosTiempo()
  ' Reiniciamos solo el tiempo parcial, no el total

  horas = 0
  minutos = 0
  segundos = 0
  ActualizarDisplay()
  TimerParcial.Start  ' Iniciamos el timer

End

' Añadir este método para actualizar el display del tiempo total
Public Sub ActualizarDisplayTotal()
  ' Formatear el tiempo total (hh:mm:ss)

  txtTiempoTotal.Text = Format(horasTotal, "00") & ":" & Format(minutosTotal, "00") & ":" & Format(segundosTotal, "00")

End

' Modificar ActualizarDisplay para incluir el tiempo parcial + total
Public Sub ActualizarDisplay()
  ' Formatear el tiempo parcial (hh:mm:ss)

  txtTiempo.Text = Format(horas, "00") & ":" & Format(minutos, "00") & ":" & Format(segundos, "00")

  ' Calcular y mostrar el tiempo total (suma del tiempo parcial actual + tiempo total anterior)
  Dim totalHoras As Integer = horasTotal
  Dim totalMinutos As Integer = minutosTotal
  Dim totalSegundos As Integer = segundosTotal + segundos

  ' Ajustar los segundos
  If totalSegundos >= 60 Then
    totalMinutos += Int(totalSegundos / 60)
    totalSegundos = totalSegundos Mod 60
  Endif

  ' Ajustar los minutos
  totalMinutos += minutos
  If totalMinutos >= 60 Then
    totalHoras += Int(totalMinutos / 60)
    totalMinutos = totalMinutos Mod 60
  Endif

  ' Ajustar las horas
  totalHoras += horas

  ' Mostrar tiempo total (tiempo acumulado + tiempo actual)
  txtTiempoTotal.Text = Format(totalHoras, "00") & ":" & Format(totalMinutos, "00") & ":" & Format(totalSegundos, "00")

End

Public Sub Form_Close()

  m_OnOff_y_Red.CerrarTodo()

End

Public Sub Menu5_Click()' salir de la aplicacion

  m_OnOff_y_Red.CerrarTodo()

End

Public Sub btnBlockNotas_Click()

  f_BlockNotas.ShowModal()

End

Public Sub btnPostIt_Click()

  f_NotaNueva.ShowModal()

End

Public Sub btnNuevoGlosario_Click()

  ' Ocultamos/mostramos botones según sea necesario
  btnNuevoGlosario.Visible = False
  btnBorrarGlosario.Visible = False
  btnGuardarGlosario.Visible = True
  btnGuardarCambiosGlosario.Visible = False

  ' Habilitamos los campos de entrada
  txtTMPglosario.Enabled = True
  txtTMPglosario.Background = Color.White
  txtTMPglosario.Clear

  tbPanelGlosarios.Index = 1
  m_glosarios.NuevoGlosario()

End

Public Sub btnAgregarClaveGlosario_Click()

  Dim sTexto As String = Trim(txtProyecto.Text)
  Dim algounico As String

  algounico = Format(Now, "yymmddhhmm") & CInt(Rnd(1, 9999))

  txtCLAVEglosario.Text = "@glo" & algounico & "-" & sTexto

End

Public Sub btnAgregarClaveGlosarioProyecto_Click()

  Dim sTexto As String = Trim(txtProyecto.Text)
  Dim sArchivo As String = txtARCHIVOglosario.Text

  If sTexto = "" Then Return ' No hacemos nada si está vacío

  ' Aseguramos que el contenido existente termine en coma
  If Right(sArchivo, 1) <> "," And sArchivo <> "" Then
    sArchivo &= ","
  End If

  ' Aseguramos que el texto nuevo no empiece con coma
  If Left(sTexto, 1) = "," Then
    sTexto = Mid(sTexto, 2)
  End If

  ' Aseguramos que el texto nuevo termine en coma
  If Right(sTexto, 1) <> "," Then
    sTexto &= ","
  End If

  ' Agregamos al campo
  txtARCHIVOglosario.Text = sArchivo & sTexto

End

Public Sub btnGuardarGlosario_Click()

  m_glosarios.GuardarPrimeraVezGlosario()
  m_glosarios.ConsultaBBDDglo()

  tbPanelGlosarios.Index = 0
  btnNuevoGlosario.Visible = True
  btnBorrarGlosario.Visible = False
  btnGuardarGlosario.Visible = False
  btnGuardarCambiosGlosario.Visible = False

End

Public Sub ViewGridGlosarioTotal_Data(Row As Integer, Column As Integer)

  If (m_glosarios.hResultadoGlosario <> Null) Then
    If Row >= 0 Then
      m_glosarios.hResultadoGlosario.moveTo(Row)
      Try ViewGridGlosarioTotal.Data.Text = Str(m_glosarios.hResultadoGlosario[Column])
    Endif
  Endif

  If row Mod 2 = 0 Then
    ViewGridGlosarioTotal.Data.Background = Color.RGB(230, 230, 230)
  Endif

End

Public Sub ViewGridGlosarioTotal_Click()

  m_glosarios.VerGlosarioEnViewGridGlosarioTotal()

  btnNuevoGlosario.Visible = True
  btnBorrarGlosario.Visible = True
  btnGuardarGlosario.Visible = False
  btnGuardarCambiosGlosario.Visible = True

End

Public Sub btnBorrarGlosario_Click()

  btnNuevoGlosario.Visible = True
  btnBorrarGlosario.Visible = False
  btnGuardarGlosario.Visible = False
  btnGuardarCambiosGlosario.Visible = False

  tbPanelGlosarios.Index = 0
  m_glosarios.BorrarGlosario()
  m_glosarios.ConsultaBBDDglo()

End

Public Sub btnGuardarCambiosGlosario_Click()

  tbPanelGlosarios.Index = 0
  m_glosarios.GuardarCambiosGlosario()
  m_glosarios.ConsultaBBDDglo()

  btnNuevoGlosario.Visible = True
  btnBorrarGlosario.Visible = False
  btnGuardarGlosario.Visible = False
  btnGuardarCambiosGlosario.Visible = False

End

Public Sub btnBuscarClaveGLO_Click()

  tbPanelGlosarios.Index = 0
  m_glosarios.BuscarClaveGlosario()

End

Public Sub btnBuscarFiltroGlosario_Click()

  tbPanelGlosarios.Index = 0
  m_glosarios.BuscarFiltroGlosario()

End

Public Sub btnBuscarNombreGlosario_Click()

  tbPanelGlosarios.Index = 0
  m_glosarios.BuscarNombreGlosario()

End

Public Sub btnBuscarTextoGlosario_Click()

  tbPanelGlosarios.Index = 0
  m_glosarios.BuscarTextoGlosario()

End

Public Sub cmbTheme_Click()
  ' Evento cuando cambia la selección del ComboBox

  Dim sThemeFile As String

  ' Obtener el archivo de tema seleccionado
  If cmbTheme.Index >= 0 Then
    sThemeFile = cmbTheme[cmbTheme.Index].Text

    ' Llamar a la función JavaScript para cambiar el tema
    ' Asumiendo que tu WebView se llama WebView1
    WebViewEditor.Eval("cambiarTema('" & sThemeFile & "');")

    Print "Cambiando tema a: " & sThemeFile
  Endif

End

' ' Alternativa si prefieres usar el evento Change en lugar de Click
' Public Sub cmbTheme_Change()
'
'   Dim sThemeFile As String
'
'   ' Obtener el archivo de tema seleccionado
'   If cmbTheme.Index >= 0 Then
'     sThemeFile = cmbTheme[cmbTheme.Index].Text
'
'     ' Llamar a la función JavaScript para cambiar el tema
'     WebViewEditor.Eval("cambiarTema('" & sThemeFile & "');")
'
'     Print "Cambiando tema a: " & sThemeFile
'   Endif
'
' End

Public Sub btnMostrarTextoExtendido_Click()

  f_TXTextendido.OriginalTextBox = txtDESCRIPTIONglosario
  f_TXTextendido.ShowModal

End

Public Sub btnPromptNuevo_Click()

  ' Ocultamos/mostramos botones según sea necesario
  btnPromptNuevo.Visible = False
  btnPromptBorrar.Visible = False
  btnPromptGuardar.Visible = True
  btnPromptGuardarCambios.Visible = False

  ' Habilitamos los campos de entrada
  txtIdentificador.Enabled = True
  txtIdentificador.ReadOnly = False
  txtIdentificador.Background = Color.White
  txtAreaPrompt1.Clear

  m_Inteligencia.PromptNuevo()

End

Public Sub btnPromptBorrar_Click()

  btnPromptNuevo.Visible = True
  btnPromptBorrar.Visible = False
  btnPromptGuardar.Visible = False
  btnPromptGuardarCambios.Visible = False

  m_Inteligencia.BorrarInteligencia()
  m_Inteligencia.ConsultaBBDDinteligencia()

End

Public Sub btnPromptGuardar_Click()

  btnPromptNuevo.Visible = True
  btnPromptBorrar.Visible = False
  btnPromptGuardar.Visible = False
  btnPromptGuardarCambios.Visible = False

  ' Habilitamos los campos de entrada
  txtIdentificador.Enabled = False
  txtIdentificador.ReadOnly = True
  txtIdentificador.Background = Color.Background

  m_Inteligencia.GuardarPrimeraVezInteligencia()
  m_Inteligencia.ConsultaBBDDinteligencia()

End

Public Sub ViewgridAI_Data(Row As Integer, Column As Integer)

  If (m_Inteligencia.hResultadoInteligencia <> Null) Then
    If Row >= 0 Then
      m_Inteligencia.hResultadoInteligencia.moveTo(Row)
      Try ViewgridAI.Data.Text = Str(m_Inteligencia.hResultadoInteligencia[Column])
    Endif
  Endif

  If row Mod 2 = 0 Then
    ViewgridAI.Data.Background = Color.RGB(230, 230, 230)
  Endif

End

Public Sub ViewgridAI_Click()

  ' Habilitamos los campos de entrada
  txtIdentificador.Enabled = True
  txtIdentificador.ReadOnly = False
  txtIdentificador.Background = Color.White
  btnPromptNuevo.Visible = True
  btnPromptBorrar.Visible = True
  btnPromptGuardar.Visible = False
  btnPromptGuardarCambios.Visible = True

  m_Inteligencia.VerInteligenciaEnViewgridAI()

End

Public Sub btnPromptGuardarCambios_Click()

  btnPromptNuevo.Visible = True
  btnPromptBorrar.Visible = False
  btnPromptGuardar.Visible = False
  btnPromptGuardarCambios.Visible = False

  m_Inteligencia.GuardarCambiosInteligencia()
  m_Inteligencia.ConsultaBBDDinteligencia()

End

Public Sub Menu9_Click()

  Dim alberto As String

  alberto = "https://albertomoyano.github.io/gbPivot/"
  Shell "xdg-open " & Quote$(alberto) Wait

End

Public Sub txtFechaPublicacionLibro_KeyRelease()

  Dim texto As String = txtFechaPublicacionLibro.Text
  Dim soloDigitos As String = ""
  Dim textoFormateado As String = ""
  Dim i As Integer
  Dim c As String

  ' Extraer solo los dígitos del texto actual
  For i = 1 To Len(texto)
    c = Mid(texto, i, 1)
    If c >= "0" And c <= "9" Then
      soloDigitos &= c
    End If
  Next

  ' Limitar a máximo 8 dígitos
  If Len(soloDigitos) > 8 Then
    soloDigitos = Left(soloDigitos, 8)
  End If

  ' Formatear automáticamente según la cantidad de dígitos
  Select Case Len(soloDigitos)
    Case 0
      textoFormateado = ""
    Case 1, 2
      textoFormateado = soloDigitos
    Case 3, 4
      textoFormateado = Left(soloDigitos, 2) & "-" & Mid(soloDigitos, 3)
    Case 5, 6, 7, 8
      textoFormateado = Left(soloDigitos, 2) & "-" & Mid(soloDigitos, 3, 2) & "-" & Mid(soloDigitos, 5)
  End Select

  ' Actualizar solo si cambió
  If textoFormateado <> texto Then
    txtFechaPublicacionLibro.Text = textoFormateado
    ' Colocar cursor al final
    txtFechaPublicacionLibro.Pos = Len(textoFormateado)
  End If

End Sub

' Bloquear entrada de caracteres no numéricos
Public Sub txtFechaPublicacionLibro_KeyPress()
  ' Permitir teclas de control

  If Key.Code = Key.BackSpace Or Key.Code = Key.Delete Or
      Key.Code = Key.Left Or Key.Code = Key.Right Or
      Key.Code = Key.Tab Or Key.Code = Key.Enter Or
      Key.Code = Key.Home Or Key.Code = Key.End Then
    Return
  End If

  ' Solo permitir números
  If Key.Text < "0" Or Key.Text > "9" Then
    Stop Event
  End If

End Sub

' Validar formato completo al perder el foco
Public Sub txtFechaPublicacionLibro_LostFocus()

  Dim texto As String = txtFechaPublicacionLibro.Text

  ' Solo permitir: vacío o formato completo 00-00-0000
  If texto <> "" And Len(texto) <> 10 Then
    Message.Error("El fecha está mal construida.\nEl campo debe estar vacío o tener el formato completo: <strong>00-00-0000</strong>", "Error de formato en la fecha")
    txtFechaPublicacionLibro.SetFocus()
    Return
  End If

  ' Si tiene 10 caracteres, verificar que tenga el formato correcto
  If Len(texto) = 10 Then
    If Mid(texto, 3, 1) <> "-" Or Mid(texto, 6, 1) <> "-" Then
      Message.Error("El campo fecha está mal construido.\nDebe tener el formato: 00-00-0000", "Error de formato")
      txtFechaPublicacionLibro.SetFocus()
      Return
    End If
  End If

End Sub

Public Sub txtTotalPaginasLibro_KeyRelease()
  ' Obtener el texto actual del TextBox

  Dim texto As String = txtTotalPaginasLibro.Text
  Dim textoFiltrado As String = ""
  Dim i As Integer
  Dim tecla As String

  ' Filtrar solo números
  For i = 1 To Len(texto)
    tecla = Mid(texto, i, 1)
    If tecla >= "0" And tecla <= "9" Then
      textoFiltrado &= tecla
    End If
  Next

  ' Actualizar el TextBox solo si hubo cambios
  If textoFiltrado <> texto Then
    txtTotalPaginasLibro.Text = textoFiltrado
    ' Colocar cursor al final
    txtTotalPaginasLibro.Pos = Len(textoFiltrado)
  End If

End Sub

' Función adicional para bloquear caracteres no numéricos desde el teclado
Public Sub txtTotalPaginasLibro_KeyPress()
  ' Permitir teclas de control

  If Key.Code = Key.BackSpace Or Key.Code = Key.Delete Or
      Key.Code = Key.Left Or Key.Code = Key.Right Or
      Key.Code = Key.Tab Or Key.Code = Key.Enter Or
      Key.Code = Key.Home Or Key.Code = Key.End Then
    Return
  End If

  ' Solo permitir números
  If Key.Text < "0" Or Key.Text > "9" Then
    Stop Event
  End If

End Sub

Public Sub btnVerProyectos_Click()
  ' Cambiar visibilidad del TabPanel2 según el estado del botón

  If btnVerProyectos.Value Then
    ' Verificar si hay un proyecto seleccionado (filtro)
    If Trim(txtProyecto.Text) = "" Then
      ' No hay proyecto seleccionado, mostrar advertencia
      Message.Warning("No tiene ningún proyecto seleccionado.\nSe abrirá el gestor para seleccionar uno.", "Aceptar")

      ' Desactivar el botón ya que no se puede mostrar el panel
      btnVerProyectos.Value = False

      ' Llamar al procedimiento para abrir un proyecto
      menuAbrirProyecto_Click()
      Return
    End If

    ' Si hay proyecto seleccionado, mostrar el panel
    PanelProyectos.Visible = True
  Else
    ' Ocultar el panel
    PanelProyectos.Visible = False
  End If

End Sub

' Public Sub btnVerProyectos_Click()
'   ' Cambiar visibilidad del TabPanel2 según el estado del botón
'
'   If btnVerProyectos.Value Then
'     ' Verificar si hay un proyecto seleccionado (filtro)
'     If Trim(txtProyecto.Text) = "" Then
'       ' No hay proyecto seleccionado, mostrar advertencia
'       Message.Warning("No tiene ningún proyecto seleccionado.\nSeleccione un proyecto antes de continuar.", "Proyecto requerido")
'       ' Desactivar el botón ya que no se puede mostrar el panel
'       btnVerProyectos.Value = False
'       Return
'     End If
'     ' Si hay proyecto seleccionado, mostrar el panel
'     PanelProyectos.Visible = True
'   Else
'     ' Ocultar el panel
'     PanelProyectos.Visible = False
'   End If
'
' End Sub

Public Sub ControlarCarpetas()

  ' Lista de directorios que deseas crear
  Dim directorios As String[] = ["art-cap", "correcciones", "media", "originales", "config", "salidas", "salidas/tapa", ".github", ".github/workflows"]

  ' Crear los directorios si no existen
  For Each directorio As String In directorios
    If Not Exist(RutaProyecto & "/" & directorio) Then
      Mkdir RutaProyecto & "/" & directorio
    End If
  Next

End

Public Sub Form_Show()

  ' Configurar el Watcher
  If RutaProyecto <> "" Then
    Watcher.Path = RutaProyecto
    Watcher.AddMask("create,delete")
    Watcher.Start
  End If

End

Public Sub menuAbrirProyecto_Click()

  Dialog.Title = "Seleccionar archivo"
  Dialog.Filter = ["*.adoc;*.tex", "Archivos .adoc y .tex", "*", "Todos los archivos"]
  Dialog.AutoExt = False
  Dialog.Path = User.Home

  If Dialog.OpenFile() Then
    Return
  Else
    ' Guardar nombre del proyecto actual antes de sobrescribirlo
    Dim sProyectoAnterior As String = File.BaseName(txtProyecto.Text)
    ' Poner en_uso = 0 al proyecto anterior si hay alguno cargado
    If txtProyecto.Text Then
      Try m_OnOff_y_Red.meConn.Exec("UPDATE proyectos SET en_uso = 0 WHERE nombre = '" & sProyectoAnterior & "'")
    Endif
    ' ahora refrescamos el nombre del archivo nuevo
    txtProyecto.Text = Dialog.Path
    NombreArchivo = File.BaseName(Dialog.Path)
    RutaProyecto = File.Dir(txtProyecto.Text)
    Dim resultado As Result
    Dim sSQL As String
    ' Agregar el campo tipo_producto a la consulta
    sSQL = "SELECT terminado, en_uso, tipo FROM proyectos WHERE nombre = '" & NombreArchivo & "'"
    resultado = m_OnOff_y_Red.meConn.Exec(sSQL)

    If Not resultado.Available Then
      Message.Warning("El archivo seleccionado no corresponde a un proyecto registrado.")
      Return
    Endif

    If resultado!terminado = True Then
      Message.Info("El proyecto <strong>'" & NombreArchivo & "'</strong> está cerrado. Contacte al editor para reabrirlo.")
      Return
    Endif

    If resultado!en_uso = True Then
      Message.Warning("Este proyecto ya está en uso por otro usuario. Espere a que se libere o contacte al editor.")
      Return
    Endif

    ' Marcar el proyecto como "en uso"
    Try m_OnOff_y_Red.meConn.Exec("UPDATE proyectos SET en_uso = 1 WHERE nombre = '" & NombreArchivo & "'")

    If Error Then
      Message.Error("No se pudo marcar el proyecto como 'en uso'.")
      Return
    Endif

    ' --- Si pasa todas las validaciones, se continúa con la apertura normal ---
    Shell Quote$("rm -rf " & User.Home & "/.local/share/org.gambas.*") & "\n" Wait

    ControlarCarpetas()' nos aseguramos revisar las carpetas del proyecto
    tvProyecto.Input("cd " & RutaProyecto & "\n")
    tvProyecto.Input("clear" & "\n")
    ImageViewProyecto.Image = Null
    DirViewProyecto.Root = File.Dir(txtProyecto.Text)
    DirViewProyecto.Refresh' hacemos un refresco luego de aseguramos de que las carpetas fueron revisadas
    FileViewProyecto.Refresh
    ' Configurar según tipo de producto
    Dim sExtension As String
    sExtension = File.Ext(txtProyecto.Text)
    Dim tipoProducto As String
    tipoProducto = resultado!tipo
    If tipoProducto = "Libro" Then
      ScrollViewLibro.Visible = True
      ScrollViewRevista.Visible = False
      If sExtension = "tex" Then
        MenuButtonLibroCompilarTeX.Visible = True
        MenuButtonLibroVerTeX.Visible = True
        MenuButtonLibroCompilarAdoc.Visible = False
        MenuButtonLibroVerAdoc.Visible = False
      Else If sExtension = "adoc" Then
        MenuButtonLibroCompilarTeX.Visible = False
        MenuButtonLibroVerTeX.Visible = False
        MenuButtonLibroCompilarAdoc.Visible = True
        MenuButtonLibroVerAdoc.Visible = True
      Endif
    Else If tipoProducto = "Revista" Then
      ScrollViewRevista.Visible = True
      ScrollViewLibro.Visible = False
    Endif

    ' falta activar el timer
  Endif

End

Public Sub btnVerificarURL_Click()

  Dim sURL As String
  Dim sResult As String
  Dim iExitCode As Integer

  ' Mostrar indicador de carga
  FMain.Mouse = Mouse.Wait

  sURL = Trim(txtURLLibro.Text)
  If sURL = "" Then
    Message.Error("Por favor, ingresar una URL válida.")
    FMain.Mouse = Mouse.Default
    Return
  Endif

  ' Comando curl con límite de tiempo y otras mejoras
  ' --connect-timeout: límite de tiempo para la conexión (5 segundos)
  ' --max-time: límite de tiempo total para la operación (10 segundos)
  Shell "curl -s -o /dev/null -w '%{http_code}' -L --connect-timeout 5 --max-time 10 -A 'Mozilla/5.0'" & " " & Quote(sURL) To sResult
  iExitCode = Process.LastValue

  ' Restaurar el cursor
  FMain.Mouse = Mouse.Default

  ' Evaluar código de estado HTTP
  Select Case sResult
    Case "200"
      Message.Info("La <strong>URL existe</strong> y respondió con código 200.")
    Case "301", "302"
      Message.Info("La <strong>URL fue redireccionada</strong> y respondió con código " & sResult & ".")
    Case "404"
      Message.Error("La <strong>URL no existe</strong> y respondió con 404 Not Found.")
    Case "500", "503"
      Message.Error("<strong>Error del servidor</strong> (" & sResult & "). Intenta nuevamente más tarde.")
    Case "000"
      Message.Error("Tiempo de espera agotado o no se pudo conectar al servidor.")
    Case Else
      Message.Error("Código de respuesta desconocido: <strong>" & sResult & "<strong>.")
  End Select

End

Public Sub btnBuscarDOI_Click()

  Dim sDOI As String
  Dim sResult As String
  Dim iExitCode As Integer

  ' Mostrar indicador de carga
  FMain.Mouse = Mouse.Wait

  sDOI = Trim(txtDOILibro.Text)
  If sDOI = "" Then
    Message.Error("Por favor, ingresar un DOI válido.")
    FMain.Mouse = Mouse.Default
    Return
  Endif

  ' Validar si el formato es de un DOI
  If Not (Left(sDOI, 4) = "http") Then
    ' Agregar el prefijo para DOI
    sDOI = "https://doi.org/" & sDOI
  Endif

  ' Comando curl con límite de tiempo y otras mejoras
  ' --connect-timeout: límite de tiempo para la conexión (5 segundos)
  ' --max-time: límite de tiempo total para la operación (10 segundos)
  Shell "curl -s -o /dev/null -w '%{http_code}' -L --connect-timeout 5 --max-time 10 -A 'Mozilla/5.0'" & " " & Quote(sDOI) To sResult
  iExitCode = Process.LastValue

  ' Restaurar el cursor
  FMain.Mouse = Mouse.Default

  ' Evaluar código de estado HTTP
  Select Case sResult
    Case "200"
      Message.Info("El <strong>DOI es válido</strong> y respondió con código 200.")
    Case "301", "302"
      Message.Info("El <strong>DOI fue redireccionado</strong> y respondió con código " & sResult & ".")
    Case "404"
      Message.Error("El <strong>DOI no existe</strong> y respondió con código 404 Not Found.")
    Case "500", "503"
      Message.Error("<strong>Error del servidor</strong> (" & sResult & "). Intenta nuevamente más tarde.")
    Case "000"
      Message.Error("Tiempo de espera agotado o no se pudo conectar al servidor.")
    Case ""
      Message.Error("Error en la ejecución del comando. Verifica la conexión a Internet.")
    Case Else
      Message.Error("Código de respuesta: <strong>" & sResult & "</strong>.")
  End Select

End

Public Sub btnConfirmarISBN_Click()

  Dim ISBN As String = txtISBNLibro.Text

  If m_Inicio.EsISBNValido(ISBN) Then
    Message.Info("El ISBN es válido.")
  Else
    Message.Warning("El ISBN no es válido.")
  End If

End

Public Sub btnVisitarURL_Click()

  Dim sUrl As String = Trim(txtURLLibro.Text)

  ' Validación básica
  If sUrl = "" Then
    Message.Error("Por favor, ingresar una dirección válida.")
    Return
  End If

  Shell "xdg-open " & Quote$(sUrl) Wait

End

' Función opcional: Validar DOI antes de navegar
Public Sub btnVisitarDOI_Click()

  Dim sDOI As String
  Dim sURLCompleta As String
  Dim sResult As String

  sDOI = Trim(txtDOILibro.Text)

  ' Validación básica
  If sDOI = "" Then
    Message.Error("Por favor, ingrese un DOI válido.")
    Return
  End If

  ' Construir URL completa
  If Not (Left(sDOI, 4) = "http") Then
    sURLCompleta = "https://doi.org/" & sDOI
  Else
    sURLCompleta = sDOI
  End If

  ' Opcional: Validar DOI antes de abrir (verificación rápida)
  FMain.Mouse = Mouse.Wait
  Shell "curl -s -o /dev/null -w '%{http_code}' -L --connect-timeout 3 --max-time 5 -A 'Mozilla/5.0'" & " " & Quote(sURLCompleta) To sResult
  FMain.Mouse = Mouse.Default

  ' Verificar si el DOI es navegable
  Select Case sResult
    Case "200", "301", "302"
      ' DOI válido, proceder a abrir
      Shell "xdg-open " & Quote$(sURLCompleta) Wait
    Case "404"
      Message.Error("<strong>El DOI no existe.</strong> No se puede navegar a esta dirección.")
    Case "000", ""
      Message.Warning("No se pudo verificar el DOI. ¿Desea intentar abrirlo de todas formas?")
      If Message.Question("¿Abrir DOI sin verificar?", "Sí", "No") = 1 Then
        Shell "xdg-open " & Quote$(sURLCompleta) Wait
      End If
    Case Else
      Message.Warning("Respuesta inesperada del servidor (" & sResult & "). ¿Desea intentar abrirlo?")
      If Message.Question("¿Abrir DOI?", "Sí", "No") = 1 Then
        Shell "xdg-open " & Quote$(sURLCompleta) Wait
      End If
  End Select

End

Public Sub combinarPDFtex_Click()

  f_CombinarPDF.ShowModal()

End

Public Sub menuCombinarPDFadoc_Click()

  f_CombinarPDF.ShowModal()

End

' Evento para agregar archivo
Public Sub btnAgregarArchivo_Click()
  ' Mostrar formulario de creación

  f_AgregarArchivo.RutaDestino = DirViewProyecto.Current
  f_AgregarArchivo.ShowModal
  ' Si se creó, actualizamos la vista
  If f_AgregarArchivo.ArchivoCreado Then
    FileViewProyecto.Dir = DirViewProyecto.Current
  Endif

  FileViewProyecto.Reload

End

' Evento click en el DirViewProyecto que actualiza los archivos que se muestran en FileViewProyecto
Public Sub DirViewProyecto_Click()

  Dim bloquear As Boolean = False

  If Not bloquear Then
    FileViewProyecto.Dir = DirViewProyecto.Current
  Endif

End

Public Sub btnBorrarArchivo_Click()

  Dim archivoSeleccionado As String
  Dim rutaCompleta As String
  Dim respuesta As Integer

  ' Verificar que hay un archivo seleccionado
  If FileViewProyecto.Current = "" Then
    Message.Warning("No hay ningún archivo seleccionado")
    Return
  Endif

  ' Obtener el archivo seleccionado y su ruta completa
  archivoSeleccionado = FileViewProyecto.Current
  rutaCompleta = FileViewProyecto.Dir &/ archivoSeleccionado

  ' Mostrar alerta de confirmación
  respuesta = Message.Question("¿Está seguro que desea eliminar el archivo '" & archivoSeleccionado & "'?", "Eliminar", "Cancelar")

  ' Si confirma (OK), eliminar el archivo
  If respuesta = 1 Then
    Kill rutaCompleta
    If Error Then
      Message.Error("Error al eliminar el archivo: " & Error.Text)
    Else
      Message.Info("Archivo eliminado correctamente")
      ' Refrescar la vista
      FileViewProyecto.Reload
    Endif
  Endif

End
