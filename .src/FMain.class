' Gambas class file

Private segundos As Integer
Private minutos As Integer
Private horas As Integer
Public $Bash As Process

Public Sub Form_Open()

  'nos conectamos a la base de datos
  m_OnOff_y_Red.OnRed()

  $Bash = TerminalView.Shell("/usr/bin/bash")

  SplitterPanel3.Layout = [1, 1]

  ' Inicializamos los contadores de minutos y segundos
  horas = 0
  minutos = 0
  segundos = 0
  ' Configuramos el Timer para que se ejecute cada segundo (1000 milisegundos)
  TimerParcial.Delay = 1000
  TimerParcial.Stop  ' No iniciamos el Timer hasta abrir un proyecto

End

Public Sub Menu5_Click()' salir de la aplicacion

  m_OnOff_y_Red.CerrarTodo()

End

Public Sub SplitterPanel3_Resize()

  SplitterPanel3.Layout = [1, 1]

End

Public Sub Menu2_Click()

  f_Preferencias.ShowModal()

End

Public Sub Menu7_Click()

  f_Conversor.ShowModal()

End

Public Sub TimerParcial_Timer()

  ' Incrementamos los segundos
  segundos += 1

  ' Si los segundos llegan a 60, incrementamos los minutos y reiniciamos los segundos
  If segundos = 60 Then
    segundos = 0
    minutos += 1
  Endif

  ' Si los minutos llegan a 60, incrementamos las horas y reiniciamos los minutos
  If minutos = 60 Then
    minutos = 0
    horas += 1
  Endif

  ' Actualizamos el display del tiempo
  ActualizarDisplay

End

' Función para actualizar el display del tiempo
Public Sub ActualizarDisplay()

  txtTiempo.Caption = Right$("0" & horas, 2) & ":" & Right$("0" & minutos, 2) & ":" & Right$("0" & segundos, 2)

End

' Función para actualizar el display del botón

Public Sub reinicamosTiempo()

  ' Reiniciamos el conteo de horas, minutos y segundos
  horas = 0
  minutos = 0
  segundos = 0

  ' Detenemos el Timer si está corriendo, luego lo reiniciamos
  TimerParcial.Stop
  TimerParcial.Start

  ' Actualizamos el display para reflejar el reinicio
  ActualizarDisplay

End

Public Sub Menu22_Click()

  f_BlockNotas.ShowModal()

End

Public Sub Menu8_Click()

  f_ExportarBIB.ShowModal()

End

Public Sub Form_Close()

  m_OnOff_y_Red.CerrarTodo()

End

Public Sub Menu6_Click() ' abrir archivo

  Dim sRuta As String
  Dim sNombreProyecto As String
  Dim rResultado As Result

  Dialog.Title = "Seleccionar archivo"
  Dialog.Filter = ["*.adoc", "Archivos de AsciiDoc"]
  Dialog.AutoExt = True
  Dialog.Path = User.Home

  If Dialog.OpenFile() Then Return

  ' Obtener la ruta y el nombre del proyecto sin extensión
  sRuta = Dialog.Path
  sNombreProyecto = File.BaseName(sRuta)
  txtProyecto.Text = sRuta
  DirViewProyecto.Root = File.Dir(sRuta)

  ' Verificar si el proyecto existe en la base de datos
  rResultado = m_OnOff_y_Red.meConn.Exec("SELECT id FROM nombre_proyecto WHERE nombre = &1", sNombreProyecto)

  If rResultado.Available Then
    Message.Info("Proyecto encontrado en la base de datos. Se abrirá la aplicación.")
  Else
    ' Proyecto no existe, insertar nuevo registro
    Try m_OnOff_y_Red.meConn.Exec("INSERT INTO nombre_proyecto (nombre, fecha) VALUES (&1, &2)", sNombreProyecto, Format(Date(Now), "yyyy-mm-dd"))

    Message.Info("El proyecto no existía en su base de datos. Se ha creado una nueva entrada.")
  Endif

  reinicamosTiempo()

End

' Evento click en DirView actualiza los archivos que se muestran en FileView1
Public Sub DirViewProyecto_Click()

  Dim bloquear As Boolean = False

  If Not bloquear Then
    FileViewProyecto.Dir = DirViewProyecto.Current
  Endif

End

' Evento que se ejecuta cuando se detecta un cambio en el directorio
Public Sub Watcher_Change()

  DirViewProyecto.Root = File.Dir(txtProyecto.Text)' reforzamos la indicación de la ruta
  DirViewProyecto.Refresh
  FileViewProyecto.Refresh

End

Public Sub ToggleButtonMostrar_Click()

  ' Cambiar visibilidad del TabPanel2 según el estado del botón
  If ToggleButtonMostrar.Value Then
    TabPanel2.Visible = True
  Else
    TabPanel2.Visible = False
  End If

End Sub
